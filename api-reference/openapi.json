{
    "openapi": "3.1.0",
    "info": {
      "title": "Chatlevel API",
      "description": "Chatlevel is a WhatsApp web API to manage any WhatsApp account programmatically.",
      "version": "v1.0.0"
    },
    "servers": [
      {
        "url": "https://chatlevel.io/api/v1"
      }
    ],
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "tags": [
      {
        "name": "devices",
        "description": "Operations related to managing devices."
      },
      {
        "name": "messages",
        "description": "Operations related to sending messages."
      }
    ],
    "paths": {
      "/devices": {
        "get": {
          "tags": ["devices"],
          "summary": "list devices",
          "description": "Retrieve a list of your devices.",
          "operationId": "list-devices",
          "responses": {
            "200": {
              "description": "A JSON array of devices",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "devices": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/device"
                        }
                      },
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["devices"],
          "summary": "create device",
          "description": "Create a new device instance",
          "operationId": "create-device",
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 20,
                      "description": "User-friendly device name"
                    },
                    "webhookUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "Webhook URL for receiving events"
                    },
                    "webhookEvents": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "device.connected",
                          "device.disconnected",
                          "qr",
                          "qr.timeout",
                          "message.received",
                          "message.sent",
                          "message.updated",
                          "message.deleted"
                        ]
                      },
                      "description": "Events to send to webhook (defaults to all). See webhook documentation for event payloads."
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Device created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "device": {
                        "$ref": "#/components/schemas/device"
                      },
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/devices/{id}": {
        "get": {
          "tags": ["devices"],
          "summary": "retrieve device",
          "description": "Retrieve a single device by its ID",
          "operationId": "retrieve-device",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Device details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "device": {
                        "$ref": "#/components/schemas/device"
                      },
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["devices"],
          "summary": "update device",
          "description": "Update the device configuration",
          "operationId": "update-device",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Device updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "device": {
                        "$ref": "#/components/schemas/device"
                      },
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["devices"],
          "summary": "delete device",
          "description": "Delete a device by ID",
          "operationId": "delete-device",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Device deleted successfully"
            }
          }
        }
      },
      "/devices/{id}/disconnect": {
        "post": {
          "tags": ["devices"],
          "summary": "disconnect device",
          "description": "Disconnect a device from WhatsApp",
          "operationId": "disconnect-device",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Device disconnected successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Device not connected or not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Failed to disconnect device",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/devices/{id}/restart": {
        "post": {
          "tags": ["devices"],
          "summary": "restart device",
          "description": "Close any open socket (without logout) and start a new session. Returns only status information.",
          "operationId": "restart-device",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Device restarted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Device not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Failed to restart device",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/devices/{id}/messages/text": {
        "post": {
          "tags": ["messages"],
          "summary": "send text message",
          "description": "Send a text message to a chat",
          "operationId": "send-text-message",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["toNumber", "message"],
                  "properties": {
                    "toNumber": {
                      "type": "string",
                      "minLength": 8,
                      "maxLength": 15,
                      "pattern": "^\\d+$",
                      "description": "WhatsApp phone number (digits only)",
                      "example": "31620292537"
                    },
                    "message": {
                      "type": "string",
                      "description": "Text message to send"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Message sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "messageId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/devices/{id}/messages/media": {
        "post": {
          "tags": ["messages"],
          "summary": "send media message",
          "description": "Send a media message (image, video, audio, document)",
          "operationId": "send-media-message",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "description": "Numeric device identifier"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["toNumber"],
                  "properties": {
                    "toNumber": {
                      "type": "string",
                      "minLength": 8,
                      "maxLength": 15,
                      "pattern": "^\\d+$",
                      "description": "WhatsApp phone number (digits only)",
                      "example": "31620292537"
                    },
                    "mediaUrl": {
                      "type": "string",
                      "description": "URL of the media file"
                    },
                    "mediaBase64": {
                      "type": "string",
                      "description": "Base64 encoded media content"
                    },
                    "mediaCaption": {
                      "type": "string",
                      "description": "Optional caption for the media"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Media message sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "messageId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "webhooks": {
      "device.connected": {
        "post": {
          "summary": "Device Connected",
          "description": "Triggered when a WhatsApp device successfully connects and authenticates",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceConnectedWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "device.disconnected": {
        "post": {
          "summary": "Device Disconnected",
          "description": "Triggered when a WhatsApp device disconnects from the server",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceDisconnectedWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "qr": {
        "post": {
          "summary": "QR Code Generated",
          "description": "Triggered when a QR code is generated for device pairing",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qrWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "qr.timeout": {
        "post": {
          "summary": "QR Code Timeout",
          "description": "Triggered when QR code scanning times out without successful pairing",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qrTimeoutWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "message.received": {
        "post": {
          "summary": "Message Received",
          "description": "Triggered when a new message is received by the WhatsApp instance",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageReceivedWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "message.sent": {
        "post": {
          "summary": "Message Sent",
          "description": "Triggered when a message is sent from the WhatsApp instance",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageSentWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "message.updated": {
        "post": {
          "summary": "Message Updated",
          "description": "Triggered when a message status is updated (e.g., delivered, read)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageUpdatedWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      },
      "message.deleted": {
        "post": {
          "summary": "Message Deleted",
          "description": "Triggered when a message is deleted",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageDeletedWebhook"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook received successfully"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "device": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identifier for the device"
            },
            "name": {
              "type": "string",
              "description": "Name of the device"
            },
            "status": {
              "type": "string",
              "enum": ["connected", "qr", "timeout"],
              "description": "Current connection status: 'qr' when waiting for QR scan, 'connected' when paired, 'timeout' when QR expired"
            },
            "qr": {
              "type": "string",
              "nullable": true,
              "description": "Base64 encoded QR code data URL (available when status is 'qr')"
            },
            "webhookUrl": {
              "type": "string",
              "nullable": true,
              "description": "Webhook URL for receiving events"
            },
            "webhookEvents": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "device.connected",
                  "device.disconnected",
                  "qr",
                  "qr.timeout",
                  "message.received",
                  "message.sent",
                  "message.updated",
                  "message.deleted"
                ]
              },
              "description": "Events to send to webhook. See webhook documentation for event payloads."
            },
            "messagesSent": {
              "type": "integer",
              "description": "Total number of messages sent"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "When the device was created"
            }
          }
        },
        "deviceUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 20,
              "description": "New name for the device"
            },
            "webhookUrl": {
              "type": "string",
              "nullable": true,
              "description": "Webhook URL for receiving events (null to disable)"
            },
            "webhookEvents": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "device.connected",
                  "device.disconnected",
                  "qr",
                  "qr.timeout",
                  "message.received",
                  "message.sent",
                  "message.updated",
                  "message.deleted"
                ]
              },
              "description": "Events to send to webhook. See webhook documentation for event payloads."
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "description": "Status code"
            },
            "message": {
              "type": "string",
              "description": "Status message"
            }
          }
        },
        "deviceConnectedWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["device.connected"],
              "description": "Event type"
            },
            "instanceId": {
              "type": "string",
              "description": "Device instance ID"
            },
            "data": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "WhatsApp account display name"
                },
                "phoneNumber": {
                  "type": "string",
                  "description": "WhatsApp phone number with country code"
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Event timestamp in ISO 8601 format"
            }
          }
        },
        "deviceDisconnectedWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["device.disconnected"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "enum": ["logged_out", "qr_timeout", "temporary_disconnect", "unknown_disconnect"],
                  "description": "Disconnect reason"
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "qrWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["qr"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {
                "qrCode": {
                  "type": "string",
                  "description": "Base64 encoded QR code data URL (data:image/png;base64,...)"
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "qrTimeoutWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["qr.timeout"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "description": "Empty object"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "messageReceivedWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["message.received"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Message ID"
                      },
                      "from": {
                        "type": "string",
                        "description": "Sender JID (e.g., 1234567890@s.whatsapp.net)"
                      },
                      "content": {
                        "type": "string",
                        "description": "Message content or description"
                      },
                      "type": {
                        "type": "string",
                        "enum": ["text", "image", "video", "audio", "document", "sticker", "contact", "location", "poll", "list", "buttons", "unknown"],
                        "description": "Message type"
                      },
                      "timestamp": {
                        "type": "integer",
                        "description": "Unix timestamp"
                      }
                    }
                  }
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "messageSentWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["message.sent"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "to": {
                        "type": "string",
                        "description": "Recipient JID"
                      },
                      "content": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": ["text", "image", "video", "audio", "document", "sticker", "contact", "location", "poll", "list", "buttons", "unknown"]
                      },
                      "timestamp": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "messageUpdatedWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["message.updated"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {
                "messageId": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "update": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["pending", "server_ack", "delivered", "read", "played"],
                      "description": "Message status"
                    }
                  }
                },
                "timestamp": {
                  "type": "integer"
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "messageDeletedWebhook": {
          "type": "object",
          "required": ["event", "instanceId", "data", "timestamp"],
          "properties": {
            "event": {
              "type": "string",
              "enum": ["message.deleted"]
            },
            "instanceId": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {
                "messageId": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "integer"
                }
              }
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "description": "API key authentication. Provide your API key as: Authorization: Bearer <api_key>. Alternative: X-API-Key: <api_key> header."
        }
      }
    }
  }